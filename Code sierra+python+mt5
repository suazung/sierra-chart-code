#include "sierrachart.h"
#include <sstream>

SCDLLName("EXAMPLE HTTP")

SCSFExport scsf_SendDataToMT5(SCStudyInterfaceRef sc)
{
    SCInputRef enable = sc.Input[0];  // Input to enable or disable the functionality

    if (sc.SetDefaults)
    {
        sc.GraphName = "Send Data to MT5";
        sc.StudyDescription = "This study sends data to MT5 via HTTP POST request.";
        
        enable.Name = "Enable";
        enable.SetYesNo(true);  // Default to enabled
        
        sc.AutoLoop = 0;  // Disable auto-looping
        return;
    }

    bool enableSendSignal = enable.GetBoolean();  // Check if sending is enabled

    int& RequestState = sc.GetPersistentInt(1);  // Persistent variable to track request state
    double Price = sc.Close[sc.ArraySize-1];  // Current closing price

    // Initialize the request if this is the first update or a full recalculation
    if (sc.UpdateStartIndex == 0 && sc.IsFullRecalculation)
    {
        // Handle initialization if needed
    }

    // Send HTTP POST request if the request state is either error or request received
    if ((RequestState == HTTP_REQUEST_ERROR || RequestState == HTTP_REQUEST_RECEIVED) && enableSendSignal)
    {
        n_ACSIL::s_HTTPHeader HTTPHeader;
        HTTPHeader.Name = "Content-Type";
        HTTPHeader.Value = "application/json";  // Content type for JSON data

        SCString postData;
        postData.Format("{\"price\": %f}", Price);  // Prepare POST data as JSON

        const char* serverURL = "http://localhost:8000/webhook";  // URL of your FastAPI server

        // Make HTTP POST request
        if (!sc.MakeHTTPPOSTRequest(serverURL, postData.GetChars(), &HTTPHeader, 1))
        {
            sc.AddMessageToLog("Error making HTTP request.", 1);  // Log error if request fails
        }

        RequestState = HTTP_REQUEST_MADE;  // Update request state
    }

    // Handle HTTP response
    if (RequestState == HTTP_REQUEST_MADE && sc.HTTPRequestID != 0)
    {
        RequestState = HTTP_REQUEST_RECEIVED;  // Update request state to received
        sc.AddMessageToLog(sc.HTTPResponse, 0);  // Log the HTTP response
    }
}





//******************************************************************************************************************************************************


from fastapi import FastAPI
from pydantic import BaseModel
import uvicorn

app = FastAPI()

# Class to represent the price data
class Item(BaseModel):
    price: float

# Global variable to store the latest received price
current_price = 0.0

# POST request to receive and process price data
@app.post("/webhook")
async def webhook(item: Item):
    global current_price
    current_price = item.price
    print(f"Received price: {current_price}")
    return {"status": "success", "received_price": current_price}

# GET request to retrieve the latest price
@app.get("/webhook")
async def get_price():
    return {"current_price": current_price}

if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8000)







//******************************************************************************************************************************************************





//+------------------------------------------------------------------+
//| Expert initialization function                                   |
//+------------------------------------------------------------------+
int OnInit()
{
   // Print initialization message
   Print("Expert initialized. Waiting for ticks...");
   return(INIT_SUCCEEDED);
}

//+------------------------------------------------------------------+
//| Expert deinitialization function                                 |
//+------------------------------------------------------------------+
void OnDeinit(const int reason)
{
   Print("Expert deinitialized.");
}

//+------------------------------------------------------------------+
//| Expert tick function                                             |
//+------------------------------------------------------------------+
void OnTick()
{
   // FastAPI server URL
   string url = "http://127.0.0.1:8000/webhook";  // Replace with your actual server URL if necessary

   // Variables for the WebRequest function
   string cookie = NULL;
   string referer = NULL;
   int timeout = 5000;  // Timeout in milliseconds
   char postData[];
   int data_size = 0;  // No data for GET request
   char result[];
   string result_headers;

   // Make GET request to retrieve the latest price
   int response = WebRequest("GET", url, cookie, referer, timeout, postData, data_size, result, result_headers);

   // Check for errors in the WebRequest
   if(response == -1)
   {
      int error_code = GetLastError();
      Print("Error making the request: ", error_code);
      return;
   }

   // Convert the response to a string
   string json_response = CharArrayToString(result);

   // Parse the response to extract the price (assuming response is in JSON format like {"current_price": 1.3171})
   double price = 0.0;
   int parse_start = StringFind(json_response, ":") + 1;
   int parse_end = StringFind(json_response, "}");
   if(parse_start > 0 && parse_end > parse_start)
   {
      price = StringToDouble(StringSubstr(json_response, parse_start, parse_end - parse_start));
   }

   // Print the received price
   Print("Received price: ", price);

   // You can now use the price in your trading logic (e.g., open/close trades based on the price)
}

//+------------------------------------------------------------------+

















